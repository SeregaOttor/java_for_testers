package test;// Generated by Selenium IDE

import model.AddressData;
import model.GroupData;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;


public class AddressCreationTest extends TestBase {

  public static List<AddressData> addressProvider() {
    var result = new ArrayList<AddressData>(List.of());
    for (var first : List.of("", "First name")) {
      for (var middle : List.of("", "Middle name")) {
        for (var last : List.of("", "Last name")) {
          for (var nick : List.of("", "Nickname")) {
            result.add(new AddressData().withFirst(first).withMiddle(middle).withLast(last).withNick(nick));
          }
        }
      }
    }
    for (int i = 0; i < 5; i++) {
      result.add(new AddressData()
              .withFirst(randomString(i * 10))
              .withMiddle(randomString(i * 10))
              .withLast(randomString(i * 10))
              .withNick(randomString(i * 10)));
    }
    return result;
  }
  @ParameterizedTest
  @MethodSource("addressProvider")
  public void canCreateMultipleAddress(AddressData address) {
    if (!app.groups().isGroupPresenty()){
      app.groups().createGroup(new GroupData("", "groups name", "group header", "group footer"));
    }
    var oldAddress = app.address().getList();
    app.address().createAddress(address);
    var newAddress = app.address().getList();
    Comparator<AddressData> compareById = (o1, o2) -> {
      return Integer.compare(Integer.parseInt(o1.id()), Integer.parseInt(o2.id()));
    };
    newAddress.sort(compareById);
    var expectedList = new ArrayList<>(oldAddress);
    expectedList.add(address.withId(newAddress.get(newAddress.size() - 1).id()).withMiddle("").withNick(""));
    expectedList.sort(compareById);
    Assertions.assertEquals(newAddress, expectedList);
  }

  public static List<AddressData> negativeAddressProvider() {
    var result = new ArrayList<AddressData>(List.of(
            new AddressData("","First name'", "", "","")
    ));
    return result;
  }

  @ParameterizedTest
  @MethodSource("negativeAddressProvider")
  public void canNotCreateAddress(AddressData address) {
    int addressCount = app.address().getCount();
    app.address().createAddress(address);
    int newAddressCount = app.address().getCount();
    Assertions.assertEquals(addressCount, newAddressCount);
  }
}
